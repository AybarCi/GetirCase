{"ast":null,"code":"import _objectSpread from \"/Users/Petito/ReactNativeProjects/GetirCase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/Petito/ReactNativeProjects/GetirCase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/Petito/ReactNativeProjects/GetirCase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/Petito/ReactNativeProjects/GetirCase/src/components/BrandCheckList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Checkbox, Table, TableBody, TableCell, TableContainer, TableRow, TextField } from '@mui/material';\nimport companies from '../data/companies';\nimport items from '../data/items';\nimport linq from 'linq';\nimport * as productActions from \"../store/actions/product.actions\";\nimport { connect } from \"react-redux\";\nimport Enumerable from 'linq';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BrandCheckList(props) {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState([0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      query = _React$useState4[0],\n      setQuery = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      autoFocusStatus = _React$useState6[0],\n      setAutoFocusStatus = _React$useState6[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoaded = _useState2[0],\n      setIsLoaded = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      companyList = _useState4[0],\n      setCompanyList = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      products = _useState6[0],\n      setProducts = _useState6[1];\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      var currentIndex = checked.indexOf(value);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n      var newList = [];\n\n      if (Enumerable.from(newChecked).toArray().length > 1) {\n        newList = linq.from(products).where(function (x) {\n          return Enumerable.from(newChecked).select(function (element) {\n            return element.slug;\n          }).contains(x.manufacturer);\n        }).toArray();\n      } else {\n        newList = linq.from(JSON.parse(localStorage.getItem(\"@products\"))).toArray();\n      }\n\n      props.onRefreshUsageProducts(newList);\n    };\n  };\n\n  var handleChange = function handleChange(event) {\n    var formattedQuery = event.target.value.toLowerCase();\n\n    if (event.target.value === null || event.target.value === \"\") {\n      setCompanyList(linq.from(companies).toArray());\n    } else {\n      var filteredData = companyList.filter(function (x) {\n        return x.name.toLowerCase().includes(formattedQuery);\n      });\n      setCompanyList(filteredData);\n    }\n\n    setQuery(event.target.value);\n  };\n\n  useEffect(function () {\n    if (!isLoaded) {\n      setIsLoaded(true);\n      setCompanyList(linq.from(companies).groupJoin(Enumerable.from(items), function (pk) {\n        return pk.slug;\n      }, function (fk) {\n        return fk.manufacturer;\n      }, function (company, items) {\n        return _objectSpread(_objectSpread({}, company), {}, {\n          items: items.toArray(),\n          count: items.toArray().length\n        });\n      }).toArray());\n    }\n\n    if (props.refresh === true) {\n      setProducts(props.products);\n    }\n\n    if (props.loaded === true) {\n      setProducts(props.products);\n    }\n  }, [isLoaded, props]);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    sx: {\n      maxHeight: 240\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-search\",\n      label: \"Search...\",\n      onChange: handleChange,\n      type: \"search\",\n      variant: \"standard\",\n      className: \"px-3 justify-content-between\",\n      color: \"secondary\",\n      value: query,\n      onFocus: function onFocus() {\n        return setAutoFocusStatus(true);\n      },\n      autoFocus: autoFocusStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      children: /*#__PURE__*/_jsxDEV(TableBody, {\n        children: companyList.map(function (company) {\n          var labelId = \"checkbox-list-label-\".concat(company.account);\n          return /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            role: \"checkbox\",\n            tabIndex: -1,\n            onClick: handleToggle(company),\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              sx: {\n                maxWidth: 15\n              },\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                color: \"secondary\",\n                edge: \"start\",\n                checked: checked.indexOf(company) !== -1,\n                tabIndex: -1,\n                disableRipple: true,\n                inputProps: {\n                  'aria-labelledby': labelId\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 25\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 23\n            }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [company.name, \" (\", company.count, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 25\n            }, _this)]\n          }, company.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BrandCheckList, \"Z66QV/5jmnd5XjBGBjsnpx7mOT8=\");\n\n_c = BrandCheckList;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    errors: state.product.errors,\n    loading: state.product.loading,\n    products: state.product.products,\n    refresh: state.product.refresh,\n    loaded: state.product.loaded\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRefreshUsageProducts: function onRefreshUsageProducts(products) {\n      return dispatch(productActions.refreshUsageProducts(products));\n    },\n    onRefreshUsageProductsReset: function onRefreshUsageProductsReset() {\n      return dispatch(productActions.refreshUsageProductsReset());\n    },\n    onGetProductsReset: function onGetProductsReset() {\n      return dispatch(productActions.getProductsReset());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrandCheckList);\n\nvar _c;\n\n$RefreshReg$(_c, \"BrandCheckList\");","map":{"version":3,"sources":["/Users/Petito/ReactNativeProjects/GetirCase/src/components/BrandCheckList.js"],"names":["React","useEffect","useState","Checkbox","Table","TableBody","TableCell","TableContainer","TableRow","TextField","companies","items","linq","productActions","connect","Enumerable","BrandCheckList","props","checked","setChecked","query","setQuery","autoFocusStatus","setAutoFocusStatus","isLoaded","setIsLoaded","companyList","setCompanyList","products","setProducts","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","newList","from","toArray","length","where","x","select","element","slug","contains","manufacturer","JSON","parse","localStorage","getItem","onRefreshUsageProducts","handleChange","event","formattedQuery","target","toLowerCase","filteredData","filter","name","includes","groupJoin","pk","fk","company","count","refresh","loaded","maxHeight","map","labelId","account","maxWidth","mapStateToProps","state","errors","product","loading","mapDispatchToProps","dispatch","refreshUsageProducts","onRefreshUsageProductsReset","refreshUsageProductsReset","onGetProductsReset","getProductsReset"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Checkbox,Table,TableBody,TableCell,TableContainer,TableRow,TextField } from '@mui/material';\r\nimport companies from '../data/companies'\r\nimport items from '../data/items'\r\nimport linq from 'linq';\r\nimport * as productActions from \"../store/actions/product.actions\";\r\nimport { connect } from \"react-redux\";\r\nimport Enumerable from 'linq';\r\n\r\nfunction BrandCheckList(props) {\r\n  const [checked, setChecked] = React.useState([0]);\r\n  const [query, setQuery] = React.useState(\"\");\r\n  const [autoFocusStatus, setAutoFocusStatus] = React.useState(false);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [companyList, setCompanyList] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  \r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n    setChecked(newChecked);\r\n    \r\n    let newList = [];\r\n    if (Enumerable.from(newChecked).toArray().length > 1) {\r\n      newList = linq.from(products).where(x => Enumerable.from(newChecked).select(element => element.slug).contains(x.manufacturer)).toArray();  \r\n    } else {\r\n      newList = linq.from(JSON.parse(localStorage.getItem(\"@products\"))).toArray();\r\n    }\r\n    props.onRefreshUsageProducts(newList);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const formattedQuery = event.target.value.toLowerCase();\r\n    if (event.target.value === null || event.target.value === \"\") {\r\n      setCompanyList(linq.from(companies).toArray());\r\n    } else {\r\n      const filteredData = companyList.filter(x => x.name.toLowerCase().includes(formattedQuery));\r\n      setCompanyList(filteredData);\r\n    }\r\n    setQuery(event.target.value);\r\n  }\r\n  useEffect(() => {\r\n    if (!isLoaded) {\r\n      setIsLoaded(true);\r\n      setCompanyList(linq.from(companies).groupJoin(\r\n                      Enumerable.from(items),\r\n                      pk => pk.slug,\r\n                      fk => fk.manufacturer,\r\n                      (company, items) => ({...company, items: items.toArray(), count: items.toArray().length})\r\n                    ).toArray());\r\n    }\r\n    if (props.refresh === true) {\r\n      setProducts(props.products);\r\n    }\r\n    if (props.loaded === true) {\r\n      setProducts(props.products);\r\n    }\r\n  }, [isLoaded, props])\r\n  return (\r\n    <TableContainer sx={{ maxHeight: 240 }}>\r\n      <TextField\r\n        id=\"standard-search\"\r\n        label=\"Search...\"\r\n        onChange={handleChange}\r\n        type=\"search\"\r\n        variant=\"standard\"\r\n        className=\"px-3 justify-content-between\"\r\n        color=\"secondary\"\r\n        value={query}\r\n        onFocus={() => setAutoFocusStatus(true)}\r\n        autoFocus={autoFocusStatus}\r\n      />\r\n      <Table stickyHeader aria-label=\"sticky table\">\r\n        <TableBody>\r\n          {\r\n            companyList.map((company) =>{\r\n            const labelId = `checkbox-list-label-${company.account}`;\r\n            return (\r\n                    <TableRow hover key={company.name} role=\"checkbox\" tabIndex={-1} onClick={handleToggle(company)}>\r\n                      <TableCell sx={{maxWidth: 15}}>\r\n                        <Checkbox\r\n                          color=\"secondary\"\r\n                          edge=\"start\"\r\n                          checked={checked.indexOf(company) !== -1}\r\n                          tabIndex={-1}\r\n                          disableRipple\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                        <TableCell>\r\n                          {company.name} ({company.count})\r\n                        </TableCell>\r\n                    </TableRow>\r\n                  );}       \r\n            )\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    errors: state.product.errors,\r\n    loading: state.product.loading,\r\n    products: state.product.products,\r\n    refresh: state.product.refresh,\r\n    loaded: state.product.loaded,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onRefreshUsageProducts: (products) => dispatch(productActions.refreshUsageProducts(products)),\r\n    onRefreshUsageProductsReset: () => dispatch(productActions.refreshUsageProductsReset()),\r\n    onGetProductsReset: () => dispatch(productActions.getProductsReset())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BrandCheckList);"]},"metadata":{},"sourceType":"module"}